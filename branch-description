#!/usr/bin/python3

import json
import os
import re
import sys
from lib import common

configs = common.Configs('branch-descriptions')

DESCRIPTIONS_JSON_FILE = 'descriptions.json'

def main():
    with common.DispatchingArgParser('short, per-branch descriptions') as parser:
        with parser.subcommand(cmd_set, 'set', help='sets the description for a branch') as cmd:
            cmd.add_argument('description')
            cmd.add_argument('-b', '--branch', help='the branch name to set a description for; defaults to current branch')
            cmd.add_argument('--color', help='The ASCII color code to display the description. For example, "33;48" for red on a gray background')
        with parser.subcommand(cmd_get, 'get', help='gets the description for a branch') as cmd:
            cmd.add_argument('-b', '--branch', help='the branch name to set a description for; defaults to current branch')
        with parser.subcommand(cmd_unset, 'unset', help='unsets the description for a branch') as cmd:
            cmd.add_argument('-b', '--branch', help='the branch name to set a description for; defaults to current branch')
        with parser.subcommand(cmd_p10_prompt, 'p10k_prompt', help='outputs a zsh script to define a powerlevel10k prompt. feed this to eval') as cmd:
            pass
        with parser.subcommand(cmd_git_pager, 'git-pager', help=f"operates as a git pager: git config --global --add pager.branch '{common.SCRIPT_NAME} git-pager'"):
            pass

def cmd_p10_prompt():
    my_path = os.path.abspath(sys.argv[0])
    if "'" in my_path:
        raise Exception(f"invalid path to script: may not contain single quotes: {my_path}")
    print('''
        function prompt_branch_description() {
          local branch_description="$('%s' get)"
          [ -n "$branch_description" ] && p10k segment -f green -t "$branch_description"
        }
         ''' % my_path)

def cmd_git_pager():
    # If we can't get the repo info, just print stdout straight
    try:
        info = RepoInfo()
    except:
        for line in sys.stdin.readlines():
            print(line, end='') # line already contains newline
        return

    # okay, we have the repo info
    branch_descriptions = get_branch_descriptions(info)

    for line in sys.stdin.readlines():
        line = line.rstrip('\n\r')
        line_no_color = re.sub(r'\x1B\[[0-9;]*[JKmsu]', '', line)
        line_has_color = line != line_no_color

        print(line, end='')
        sys.stdout.flush()

        branch_match = re.search('(\S+)$', line_no_color)
        if branch_match:
            branch_name = str(branch_match.group(1))
            branch_description = branch_descriptions.get(branch_name, None)
            if branch_description:
                color = branch_description.get('color', '96')
                desc = branch_description["description"]
                print(f' \033[{color}m// {desc}\033[0m', file=sys.stderr, end='')
                sys.stderr.flush()
        print('') # we stripped the newline earlier


def cmd_set(description, branch, color):
    info = RepoInfo(branch)

    descriptions = configs.read_json(DESCRIPTIONS_JSON_FILE, default_value={})

    if info.repo_path not in descriptions:
        descriptions[info.repo_path] = {}
    if description is None:
        descriptions[info.repo_path].pop(info.current_branch, None)
    else:
        descriptions[info.repo_path][info.current_branch] = {
            'description': description
        }
        if color:
            descriptions[info.repo_path][info.current_branch]['color'] = color

    clean_descriptions(descriptions)
    configs.write_json(DESCRIPTIONS_JSON_FILE, descriptions)

def cmd_unset(branch):
    cmd_set(None, branch)

def cmd_get(branch):
    try:
        info = RepoInfo(branch)
    except:
        return

    branch_descriptions = get_branch_descriptions(info)
    branch_description = branch_descriptions.get(info.current_branch, {})
    desc = branch_description.get('description', '')
    color = branch_description.get('color')
    if color:
        desc = f'\033[{color}m{desc}\033[0m'
    print(desc)

def get_branch_descriptions(repo_info=None):
    if repo_info is None:
        repo_info = RepoInfo()
    descriptions = configs.read_json(DESCRIPTIONS_JSON_FILE, default_value={})
    if clean_descriptions(descriptions):
        configs.write_json(DESCRIPTIONS_JSON_FILE, descriptions)
    return descriptions.get(repo_info.repo_path, {})

def clean_descriptions(descriptions):
    cleaned_any = False
    # when we iterate, we first call list() on the iterator to reify the keys. That way, it's safe to delete them from the dict
    # as we iterate
    for repo_path in list(descriptions.keys()): # defensive copy so we can delete in the iteration
        if not os.path.isdir(repo_path):
            descriptions.pop(repo_path)
            cleaned_any = True
        else:
            repo_descriptions = descriptions[repo_path]
            try:
                repo_branch_names = common.simple_exec("git for-each-ref --format=%(refname:short) refs/heads/".split(), cwd=repo_path)
            except:
                # If git gives an error, just ignore this dir. It could be that it's not a git dir anymore, but that seems
                # unlikely. More likely it's some config issue with git.
                continue
            repo_branch_names = set(repo_branch_names.split('\n'))
            for branch_name in list(repo_descriptions.keys()):
                if branch_name not in repo_branch_names:
                    repo_descriptions.pop(branch_name)
                    cleaned_any = True
            if not repo_descriptions:
                descriptions.pop(repo_path)
    return cleaned_any


class RepoInfo:
    def __init__(self, branch_name=None):
        self.repo_path = common.simple_exec('git rev-parse --show-toplevel'.split())
        self.current_branch = branch_name or common.simple_exec('git rev-parse --abbrev-ref HEAD'.split())

if __name__ == '__main__':
    main()



